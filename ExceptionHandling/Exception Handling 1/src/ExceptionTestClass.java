

class Exc2 {
    public static void main(String args[]) {
        int d, a;
        try { // monitor a block of code.
            d = 0;
            a = 42 / d;
            System.out.println("This will not be printed.");
        }catch (ArrayIndexOutOfBoundsException e){
            System.out.println("Index out of bound exception");

        }catch (ArithmeticException e){
            System.out.println("Arithmetic exception");
        }
        finally {
            System.out.println("this is final block");
        }
        System.out.println("After try statement.");
    }
}



class MultiCatch {
    public static void main(String args[]) {
        try {
            int a = 2;
            System.out.println("a = " + a);
            int b = 42 / a;
            int c[] = { 1 };
            c[42] = 99;
        }
        catch(ArrayIndexOutOfBoundsException e) {
            System.out.println("Array index oob: " + e);
        }
        catch(ArithmeticException e) {
            System.out.println("Divide by 0: " + e);
        }

        System.out.println("After try/catch blocks.");
    }
}


class NestTry {
    public static void main(String args[]) {
        try {
            int a = 2;

            /* If no command-line args are present,
            the following statement will generate
            a divide-by-zero exception. */

            int b = 42 / a;
            System.out.println("a = " + a);

            try { // nested try block

            /* If one command-line arg is used,
            then a divide-by-zero exception
            will be generated by the following code. */

                if(a==1) {
                    a = a / (a - a); // division by zero
                }
                    /* If two command-line args are used,
                       then generate an out-of-bounds exception. */

                if(a==2) {
                    int c[] = { 1 };
                    c[42] = 99; // generate an out-of-bounds exception
                }
            } //inner try ends
            catch(ArrayIndexOutOfBoundsException e) {
                System.out.println("Array index out-of-bounds: " + e);
            }
        } //outer try ends
        catch(ArithmeticException e) {
            System.out.println("Divide by 0: " + e);
        }
    }
}

class ThrowDemo {
    static void demoproc() {
        try {
            throw new NullPointerException("demo"); // by new
        } catch(NullPointerException e) {
            System.out.println("Caught inside demoproc.");
            throw e; // re-throw the exception : using parameter
        }
    }
    public static void main(String args[]) {
        try {
            demoproc();
        } catch(NullPointerException e) {
            System.out.println("Recaught: " + e);
        }
    }
}

// This program contains an error and will not compile.
/* class ThrowsDemo {
    static void throwOne() {
        System.out.println("Inside throwOne.");
        throw new IllegalAccessException("demo");
    }
    public static void main(String args[]) {
        throwOne();
    }
} */

// This is now correct.
class ThrowsDemo {
    static void throwOne() throws IllegalAccessException
    {
        System.out.println("Inside throwOne.");
        throw new IllegalAccessException("demo");

    }
    public static void main(String args[]) {
        try {
            throwOne();
        } catch (IllegalAccessException e) {
            System.out.println("Caught " + e);
        }
    }
}
class MyOwnException extends Exception {
    public MyOwnException(String msg){
        super(msg);
    }
}

class EmployeeTest{
    static void employeeAge(int age) throws MyOwnException
    {
        if(age < 0)
            throw new MyOwnException("Age can't be less than zero");
        else
            System.out.println("Input is valid!!"); }
    public static void main(String[] args) {
        try {
            employeeAge(-2); }
        catch (MyOwnException e) {
            e.printStackTrace();
        }
    }
}

class FinallyDemo {
    // Through an exception out of the method.
    static void procA() {
        try {
            System.out.println("inside procA");
            throw new RuntimeException("demo");
        }
        finally {
            System.out.println("procA's finally");
        }
    }
    // Return from within a try block.
    static void procB() {
        try {
            System.out.println("inside procB");
            return;
        } finally {
            System.out.println("procB's finally");
        }
    }
    // Execute a try block normally.
    static void procC() {
        try {
            System.out.println("inside procC");
        } finally {
            System.out.println("procC's finally");
        }
    }
    public static void main(String args[]) {
        try {
            procA();
        } catch (Exception e) {
            System.out.println("Exception Handled");
        }
        procB();
        procC();
    }
}






